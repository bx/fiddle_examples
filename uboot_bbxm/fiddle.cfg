[Main]
root = '~/fiddle'
test_data_path = '{Main.root}/uboot_results'
cc = '~/software/gcc-linaro-5.2-2015.11-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-'
hardwareclass = 'bbxm'
name = "uboot_test"

[HardwareClass.bbxm]
	hw_info_path = "{Main.hw_info_path}/{HardwareClass.bbxm.name}"
	hosts = ['qemu', 'baremetal', 'framac']
	default_host = "qemu"
	addr_range = [0, 0xFFFFFFFF]
        [HardwareClass.bbxm.named_addr_ranges]
            onchip = [0x40200000, 0x40210000]
            dram = [0x80000000, 0xa0000000]

	[HardwareClass.bbxm.Files.reference]
	  type = "config"
	  path = "{HardwareClass.bbxm.hw_info_path}/am37x_technical_reference.pdf"

	[HardwareClass.bbxm.Files.base_mmap]
	  type = "mmap"
	  path = "{HardwareClass.bbxm.hw_info_path}/am37x_base_memory_map.csv"

	[HardwareClass.bbxm.Files.mmap]
	  type = "mmap"
	  subtype = "registers"
	  generate = true
	  file_deps = ["{HardwareClass.bbxm.Files.reference.path}"]
	  relative_path = 'am37x_registers.csv'
	  command = "python {Software.reg_parser.binary} -p -i {HardwareClass.bbxm.Files.reference.path} -o {HardwareClass.bbxm.Files.mmap.path}"

[Target]
	arch = 'arm'
	makecfg = 'bbxm_verified_defconfig'
	software = 'u_boot'
	default_stages = ['spl']

[HostConfig]
	[HostConfig.qemu]
	host_software = 'qemu'
	machinename = 'beaglexm'
	tracing_methods = ['watchpoint', 'breakpoint', 'calltrace', 'enforce']
	default_tracing = ["breakpoint", "calltrace"]

        [HostConfig.qemu.GDBConfig]
         calltrace_no_recursion = "sdelay"

         calltrace_blacklist_spl = "spl __s_init_from_arm get_timer get_timer_masked udelay"
	 calltrace_blacklist_main = "__s_init_from_arm get_sp setup_start_tag get_timer get_timer_masked __udivsi3 udelay"

	[HostConfig.baremetal]
	is_baremetal = true
	openocd_cfg = 'board/ti_beagleboard_xm.cfg'
	stepper_init = 'ocdinit2'
	host_software = 'openocd'
	tracing_methods = ['watchpoint', 'breakpoint', 'calltrace']
	default_tracing = ["breakpoint", "calltrace"]

	[HostConfig.framac]
	task_handler = 'framac'
	host_software = 'frama_c'
	tracing_methods = ['framac']


[Software]
	[Software.u_boot]
	root = '{Main.root}/fiddle_examples/uboot_bbxm/u-boot-src'
	build_prepare = "make ARCH={Target.arch} CROSS_COMPILE={Main.cc} {Target.makecfg}"
	build_cmd = "make ARCH={Target.arch} CROSS_COMPILE={Main.cc}"
	clean = "make distclean"
	build = true
	compiler = '{Main.cc}gcc'

	[Software.u_boot.Files.spl]
	relative_path = 'spl/u-boot-spl'
	generate = true
	type = 'image'

	[Software.u_boot.Files.main]
	relative_path = 'u-boot'
	type = 'image'
	cache = false

	[Software.u_boot.Files.u_boot_img]
	relative_path = 'u-boot.img'
	type = 'image'
	cache = false

	[Software.u_boot.Files.MLO]
	relative_path = 'MLO'
	type = 'image'

	[Software.u_boot.Files.sd_image]
	type = "target"
	cache = false
	relative_path = "sd.img"
	dependencies = ["{instance_root}"]
	generator = "sd_image_builder"
	global_name = "sd_image"

        [Software.u_boot.Files.sdskeleton]
	  type = "config"
	  path = "{HardwareClass.bbxm.hw_info_path}/beagleboard-xm-orig.img"
	  cache = false


	[Software.reg_parser]
	root = '{Main.test_suite_dir}/fiddle_extra'
	binary = '{Software.reg_parser.root}/parse_am37x_register_tables.py'



	[Software.frama_c]
	build = false
	root = '{Main.test_suite_dir}/frama_c'
	binary = '{Software.frama_c.root}/frama_c.py'
	type = 'default'

	[Software.qemu]
	root = '{Main.root}/fiddle_examples/uboot_bbxm/qemu-linaro'
	type = 'host'
	binary = '{Software.qemu.root}/arm-softmmu/qemu-system-arm'
	build_prepare = 'sed "s:strong{:strong\\\\{:;" -i scripts/texi2pod.pl; sed "s:struct ucontext_t:ucontext_t:" -i user-exec.c;./configure --python=/usr/bin/python2 --target-list=arm-softmmu,arm-linux-user  --enable-system --enable-trace-backends=simple --disable-werror --extra-cflags="-I/usr/include/dtc/" --disable-xen'
	build = true
	build_cmd = "make"
	compiler = "/usr/bin/gcc"
	clean = "make clean"
	[Software.qemu.ExecConfig]
		command = "-M {runtime.trace.host.machinename} -sd {sd_image} -clock vm -s -S"
        [Software.qemu.GDBConfig]
		commands = ["set tcp connect-timeout 120",
			    "set remotetimeout -1",
			    'shell {Software.qemu.ExecConfig.command} &',
			    'shell sleep 2',
			    "target extended-remote localhost:1234"]

	[Software.openocd]
	root = '{Main.root}/fiddle_examples/uboot_bbxm/openocd-patched'
	type = 'default'
	build = true
	clean = "make clean"
	build_cmd = "make"
	compiler = "/usr/bin/gcc"
	binary = '{Software.openocd.root}/src/openocd'
	build_prepare = './bootstrap; CFLAGS="-Wno-error=implicit-fallthrough -Wno-error=format-overflow -Wno-error=tautological-compare" ./configure --enable-ftdi'
	[Software.openocd.Files.log]
		type = "log"
		relative_path = "openocd.log"

	[Software.openocd.Files.ocdinit]
		type = "config"
		path = "{HardwareClass.bbxm.hw_info_path}/ocdinit"

	[Software.openocd.Files.ocd_search_path]
		type = "default"
		path = "{Software.openocd.root}/tcl"

	[Software.openocd.Files.jtagconfig]
		type = "config"
		path = '{Software.openocd.root}/tcl/interface/ftdi/xds100v2.cfg'

	[Software.openocd.ExecConfig]
		command = ['{Software.openocd.name} -f {Software.openocd.Files.jtagconfig.path} -f {Software.openocd.Files.ocdinit.path} -s {Software.openocd.Files.ocd_search_path.path} -c "gdb_port pipe; log_output {Software.openocd.Files.log.path}; init; reset init;"']

	[Software.openocd.GDBConfig]
		commands =  ["set tcp connect-timeout 120",
			    "set remotetimeout -1",
			    "set python print-stack full",
			    "set pagination off",
			    'set height unlimited',
			    'set confirm off',
			    'shell {Software.qemu.binary} {Software.qemu.ExecConfig.command} &',
			    'shell sleep 2',
			    "target extended-remote localhost:1234",
			    'set mem inaccessible-by-default off',
			    'mon dap apsel 0',
			    'mon init',
			    'mon reset init',
			    'mon debug_level 3',
			    'mon arm core_state arm',
			    'mon dap apsel 1',
			    'mon reg r0 0x4020dff0',
			    'mon mwb 0x4020DFF2 1',
			    'mon mwb 0x4020DFF4 6',
			    'mon dap apsel 0',
			    'mon step 0x402007FC',
			    'mon reg r0 0x4020dff0',
			    'mon mwb 0x4020DFF2 1',
			    'mon mwb 0x4020DFF4 6',
			    'mon dap apsel 1',
			    'gdb_tools is_bare_metal']




[TargetStage]
	[TargetStage.main]
	image = '{Software.u_boot.Files.u_boot_img.relative_path}'
	elf = '{Software.u_boot.Files.main.relative_path}'
	exitpc = 0x80008000
	write_check_hook = "uboot_mux"

	[TargetStage.spl]
	image = '{Software.u_boot.Files.MLO.relative_path}'
	elf = '{Software.u_boot.Files.spl.relative_path}'
	exitpc = 'main'
	write_dest_hook = "uboot_mux"
	write_dest_init = "uboot_mux_init"

	[TargetStage.spl.Reloc.clk_code]
	path = "{HardwareClass.bbxm.hw_info_path}/hw_info.py"
	generator = "get_relocation"

	[TargetStage.main.Reloc.clk_code]
	path = "{HardwareClass.bbxm.hw_info_path}/hw_info.py"
	generator = "get_relocation"

	[TargetStage.main.Reloc.reloc_code]
	path = "{HardwareClass.bbxm.hw_info_path}/hw_info.py"
	generator = "get_relocation"


	[TargetStage.spl.Longwrite.memset]
	inplace = false
	[TargetStage.spl.Longwrite.memcpy]
	inplace = false
	[TargetStage.spl.Longwrite.bss]
	inplace = false
	[TargetStage.spl.Longwrite.mmc_read_data]
	inplace = false

	[TargetStage.main.Longwrite.memset]
	inplace = false
	[TargetStage.main.Longwrite.memcpy]
	inplace = false
	[TargetStage.main.Longwrite.bss]
	inplace = false

	[TargetStage.main.Longwrite.mmc_read_data]
	inplace = false


 	[TargetStage.main.Longwrite.memmove]
	inplace = false

	[TargetStage.main.Longwrite.relocate_code]
	inplace = false

	[TargetStage.main.Longwrite.string]
	inplace = false


       [TraceMethod.watchpoint]
       conflicts = ["Tracemethod.breakpoint"]
       software = ["gdb", "gdb_tools"]
       	 run = "I_CONF={config} {Software.gdb.binary} -ex 'set environment I_CONF={config}' {TraceMethod.watchpoint.GDBConfig.extra} {TraceMethod.gdb_commands} -ex 'gdb_tools go -p' -ex 'c' -ex 'monitor quit' -ex 'monitor exit' -ex 'q' && true"
	   [TraceMethod.watchpoint.Files.trace_events]
	   type = "config"
	   dependencies = ["{instance_root}", "{trace_root}", "{stage}"]
	   path = "{HardwareClass.bbxm.hw_info_path}/trace-events"

	   [TraceMethod.watchpoint.Files.trace_output]
	   type = "target"
	   dependencies = ["{instance_root}", "{trace_root}", "{stage}"]
	   relative_path = "trace-output"

	   [TraceMethod.watchpoint.Files.main_events_file]
	   type = "config"
	   dependencies = ["{instance_root}", "{stage}"]
	   path = "{HardwareClass.bbxm.hw_info_path}/u_boot/main/main-events"


	   [TraceMethod.watchpoint.Files.spl_events_file]
	   type = "config"
	   dependencies = ["{instance_root}", "{stage}"]
	   path = "{HardwareClass.bbxm.hw_info_path}/u_boot/spl/spl-events"

	   [TraceMethod.watchpoint.GDBConfig]
	   extra = "-ex 'set tcp connect-timeout 120' -ex 'set remotetimeout -1' -ex 'shell {Software.qemu.binary} {Software.qemu.ExecConfig.command} -trace file={TraceMethod.watchpoint.Files.trace_events.path},events={TraceMethod.watchpoint.Files.spl_events_file.path} &'  -ex 'shell sleep 2' -ex 'target extended-remote localhost:1234'  -ex 'mon trace-event main_uboot_writes off' -ex 'mon trace-event my_cpu_write on'"
	   commands = ["mon trace-file set {TraceMethod.watchpoint.Files.trace_output.path}", "handle SIGTRAP nostop",
	   	        "gdb_tools stages {runtime.enabled_stagenames}"]


       [TraceMethod.framac]
       software = ["frama_c"]
       run = "{Software.frama_c.binary}"

       [TraceMethod.framac.Files.callstack]
       type = "target"
       relative_path = "callstack.txt"
